---
- when: "'exclude_when' not in package or not package.exclude_when|bool"
  block:
    - name: "{{package.repo}} - Obtaining from git"
      import_role:
        name: lamachine-git
      vars:
        do_registration: false

    - name: "{{package.repo}} - Checking whether recompilation is needed"
      shell: |
          {% if (force is defined) or (autoconf_git_updated is defined and 'stdout' in autoconf_git_updated and autoconf_git_updated.stdout|int == 1) %}
          #an earlier compilation was (re)performed so we update everything thereafter as well
          echo 1 && exit 0
          echo "Compilation required because of earlier updates...">&2
          {% endif %}
          available=$(git rev-parse HEAD)
          echo "Available commit: $available">&2
          if [ -f .installed-commit.lamachine ]; then
            installed=$(cat .installed-commit.lamachine)
            echo "Installed commit: $installed">&2
            if [ "$available" = "$installed" ]; then
              echo "No recompilation necessary...">&2
              echo 0 && exit 0
            fi
          fi
          echo "Scheduling compilation...">&2
          if [ -e Makefile ]; then
            echo "Cleaning up old version first">&2
            make distclean > /dev/null
          fi
          echo 1
      args:
        chdir: "{{ source_path }}/{{package.repo}}"
      register: autoconf_git_updated
      changed_when: autoconf_git_updated.stdout|int == 1

    - name: "{{package.repo}} - Compiling"
      import_role:
        name: lamachine-cpp-automake
      vars:
        pkg_source_dir: "{{ source_path }}/{{package.repo}}"
        pkg_name: "{{package.repo}}"
      when: autoconf_git_updated.stdout|int == 1

    - name: "{{package.repo}} - Registering current version"
      shell: "git rev-parse HEAD > .installed-commit.lamachine"
      args:
        chdir: "{{ source_path }}/{{package.repo}}"
      when: autoconf_git_updated.stdout|int == 1 and make_install_result is defined and make_install_result.rc == 0

    - name: "{{package.repo}} - Obtaining version number for registration"
      shell: |
        if git describe --tags > .installed-version.lamachine; then
          cat .installed-version.lamachine
        else
          cat .installed-commit.lamachine
        fi
      args:
        executable: "/bin/bash"
        chdir: "{{ source_path }}/{{package.repo}}"
      register: register_version

    - name: "{{package.repo}} - Checking whether codemeta.json is provided (stable)"
      stat:
        path: "{{ source_path }}/{{package.repo}}/codemeta.json"
      register: have_codemeta
      changed_when: False

    - name: "{{package.repo}} - Registering metadata"
      include_role:
         name: lamachine-register
      vars:
         codemeta: "{% if have_codemeta.stat.exists %}{{ source_path }}/{{package.repo}}/codemeta.json{% endif %}"
         metadata_defaults:
           identifier: "{{package.repo|lower}}"
           name: "{{package.repo}}"
           codeRepository: "{% if 'giturl' in package %}{{package.giturl}}{%else%}https://github.com/{{package.user}}/{{package.repo}}{% endif %}"
           version: "{{ register_version.stdout }}"
           producer: "{% if 'user' in package %}{% if package.user in github_clst_users %}{{metadata_producer_clst}}{% else %}{{metadata_producer_unknown}}{% endif %}{% else %}{{metadata_producer_unknown}}{% endif %}"
