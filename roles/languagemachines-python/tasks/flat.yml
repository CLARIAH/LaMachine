---

    - when: webserver and ("flat" in services or "all" in services) and ('flat' not in remote_services or not remote_services.flat)
      block:
        - name: Install FLAT webapplication
          include_role:
              name: lamachine-web-install
          vars:
            service:
              nginx: flat
              uwsgi: flat

        - name: Create server writable directories for FLAT (global)
          become: "{{lm_become}}"
          become_user: root
          file:
              path: "{{ lm_prefix }}/{{item}}"
              state: directory
              owner: "{{ unix_user }}"
              group: "{{ web_group }}"
              mode: u+rwx,g+rwsx,a+rx
          with_items:
              - "var/www-data/flat.docroot"
              - "var/log/foliadocserve"
          when: root and locality == "global"

        - name: Create server writable directories for FLAT (local)
          file:
              path: "{{ lm_prefix }}/{{item}}"
              state: directory
              mode: u+rwx,g+rwx,a+rx
          with_items:
              - "var/www-data/flat.docroot"
              - "var/log/foliadocserve"
          when: root and locality == "local"

        - name: Installing FLAT settings
          template:
              src: "flat_settings.py"
              dest: "{{lm_prefix}}/etc/flat_settings.py"
              force: yes
              backup: yes
              owner: "{{unix_user}}"
              mode: u+rw,a+r
          when: not custom_flat_settings

        - name: Applying migrations
          shell: PYTHONPATH="{{lm_prefix}}/etc:{% if root and locality == 'global' %}{{lm_pythonpath}}{% endif %}" DJANGO_SETTINGS_MODULE=flat_settings django-admin migrate --run-syncdb
          args:
              executable: /bin/bash
              chdir: "{{lm_prefix}}/etc"
          environment: "{{lm_env}}"
          when: not custom_flat_settings

        - name: Create FLAT superuser and (re)set password
          shell: |
            export PYTHONPATH="{{lm_prefix}}/etc:{% if root and locality == 'global' %}{{lm_pythonpath}}{% endif %}" DJANGO_SETTINGS_MODULE=flat_settings
            echo -ne "
            from django.contrib.auth.models import User

            username = 'flat'
            password = '{{flat_password}}'
            email = '{{maintainer_mail}}'

            if User.objects.filter(username=username).count() == 0:
            \tUser.objects.create_superuser(username, email, password)
            \tprint('Superuser created.')
            else:
            \ttry:
            \t\tobj = User.objects.get(username=username)
            \t\tprint('Updating existing password for superuser.')
            \t\tobj.set_password(password)
            \t\tobj.save()
            \texcept:
            \t\tprint('Superuser creation skipped.')
            " | django-admin shell -i python
          args:
              executable: /bin/bash
              chdir: "{{lm_prefix}}/etc"
          environment: "{{lm_env}}"
          when: not custom_flat_settings

        - name: Configure FLAT domain
          shell: |
            export PYTHONPATH="{{lm_prefix}}/etc:{% if root and locality == 'global' %}{{lm_pythonpath}}{% endif %}" DJANGO_SETTINGS_MODULE=flat_settings
            echo -ne "

            username = 'flat'
            password = 'flat'
            email = 'flat@localhost'

            from django.contrib.sites.models import Site
            one = Site.objects.all()[0]
            one.domain = '{{hostname}}/flat'
            one.name = 'FLAT'
            one.save()" | django-admin shell -i python
          args:
              executable: /bin/bash
              chdir: "{{lm_prefix}}/etc"
          environment: "{{lm_env}}"
          when: not custom_flat_settings

        - name: Ensure FLAT user database is writable
          file:
            path: "{{www_data_path}}/flat.db"
            mode: u+rw,g+rw,a+r

        - name: Register FLAT
          include_role:
              name: lamachine-register
          vars:
            update: "folia-linguistic-annotation-tool"
            metadata: #add entrypoint metadata to registry
                identifier: "folia-linguistic-annotation-tool"
                funder: "CLARIAH"
                entryPoints:
                  - "@type": "EntryPoint"
                    urlTemplate: "{% if flat_url is defined %}{{flat_url}}{% else %}{{lm_base_url}}/flat{% endif %}"
                    interfaceType: "WUI"
