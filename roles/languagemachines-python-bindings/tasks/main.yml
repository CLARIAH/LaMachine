---

  - when: ran_python_bindings is not defined
    block:
    - name: Installing Python bindings
      include_role:
        name: lamachine-python-install
      with_items:
          - { github_user: "proycon", github_repo: "python-ucto", pip: "python-ucto", conda: "" }
          - { github_user: "proycon", github_repo: "python-frog", pip: "python-frog", conda: "" }
      loop_control:
          loop_var: package


    - block:
      - name: Installing Python bindings (2)
        include_role:
          name: lamachine-python-install
        with_items:
            - { github_user: "proycon", github_repo: "python-timbl", pip: "python3-timbl", conda: "" }
        loop_control:
            loop_var: package
      rescue:
      - name: "python-timbl failure?"
        fail:
          msg: "Python-timbl installation failed!"
        when: ansible_distribution|lower != "macosx"


    - name: Triggering manual mode for Colibri Core #otherwise setup.py will attempt to recompile c++ sources (and fail on a permission issue)
      file:
        path: "{{source_path}}/colibri-core/manual"
        state: touch
      changed_when: False

    - name: Detect current colibri-core branch or tag
      shell: "git describe --tags || git rev-parse HEAD"
      register: current_coco_branch_or_tag
      args:
        chdir: "{{source_path}}/colibri-core"

    - name: Installing Colibri Core Python Binding
      include_role:
        name: lamachine-python-install
      vars:
        do_registration: false #main software was already registered
        package:
          github_user: proycon
          github_repo: colibri-core #always installed from source, will reuse same sourcedir as C++ lib
          git_branch: "{{ current_coco_branch_or_tag.stdout }}"

    - name: Testing Python bindings (1)
      include_role:
          name: lamachine-run
      vars:
          command: "python3 -c 'import {{ item }}'"
          allow_failure: "{{ignore_tests|bool}}"
      with_items:
          - colibricore
      ignore_errors: "{{ignore_tests|bool}}"

    - block:
      - name: Testing Python bindings (2)
        include_role:
            name: lamachine-run
        vars:
            command: "python3 -c 'import {{ item }}'"
            allow_failure: "{{ignore_tests|bool}}"
        with_items:
            - ucto
            - frog
            - colibricore
        ignore_errors: "{{ignore_tests|bool}}"
      rescue:
      - name: "Python binding test failed. Removing old artefacts and retrying"
        become: "{{lm_become}}"
        become_user: root
        shell: |
          #!/bin/sh
          #remove .so artefacts:
          rm "{{lm_prefix}}/lib/python{{python_version.stdout}}/site-packages/ucto.cpython"*
          rm "{{lm_prefix}}/lib/python{{python_version.stdout}}/site-packages/frog.cpython"*
          rm "{{lm_prefix}}/lib/python{{python_version.stdout}}/dist-packages/ucto.cpython"*
          rm "{{lm_prefix}}/lib/python{{python_version.stdout}}/dist-packages/frog.cpython"*
          #remove sources
          rm -Rf {{source_path}}/python-ucto
          rm -Rf {{source_path}}/python-frog
      - name: Installing Python bindings (second attempt)
        include_role:
          name: lamachine-python-install
        with_items:
            - { github_user: "proycon", github_repo: "python-ucto", pip: "python-ucto" }
            - { github_user: "proycon", github_repo: "python-frog", pip: "python-frog" }
        loop_control:
            loop_var: package
      - name: Testing Python bindings (2) - second attempt
        include_role:
            name: lamachine-run
        vars:
            command: "python3 -c 'import {{ item }}'"
            allow_failure: "{{ignore_tests|bool}}"
        with_items:
            - ucto
            - frog

    - name: Testing Python bindings (3)
      include_role:
          name: lamachine-run
      vars:
          command: "python3 -c 'import {{ item }}'"
          allow_failure: "{% if ignore_tests|bool or ansible_distribution|lower == 'macosx' %}True{%else%}False{% endif %}"
      with_items:
          - timbl
      ignore_errors: "{% if ignore_tests|bool or ansible_distribution|lower == 'macosx' %}True{%else%}False{% endif %}"

    - name: Updating metadata for CLARIAH software
      include_role:
        name: lamachine-register
      vars:
        update: "{{item}}"
        metadata:
          identifier: "{{item}}"
          funder:
            - "@type": Organization
              name: CLARIAH
              url: https://clariah.nl
      with_items:
        - python-frog
        - python-ucto
  - set_fact: ran_python_bindings=1
